@startuml

skinparam linetype ortho

class AlchemicIngredient {
..attributes..
- {final} amount : double
- {final} unit : Unit
- temperature : Temperature
- type : IngredientType
- state : State
- isContainerized : boolean
..constructors..
+ AlchemicIngredient(Quantity, IngredientType)
+ AlchemicIngredient(Quantity)
..public methods..
+ getColdness() : int
+ getHotness() : int
+ getTemperature() : int[2]
+ heat() : void
+ cool() : void
+ getSimpleName() : String
+ getFullName() : String
+ getSpecialName() : String
+ isContainerized() : boolean
+ setContainerized(boolean, IngredientContainer) : void
..non-public..
- getTemperatureObject() : Temperature
..checkers..
+ isValidAmount(double) : boolean
+ isValidUnit(Unit) : boolean
+ isValidTemperature(Temperature) : boolean
+ isValidType(Type) : boolean
+ isValidState(State) : boolean
..class invariants..
@invar isValidAmount(getAmount())
@invar isValidUnit(getUnit())
@invar isValidTemperature(getTemperatureObject())
@invar isValidType(getType())
@invar isValidState(getState())
}

note right of AlchemicIngredient::setContainerized
    Deze methode krijgt een container mee, zodat bij het oproepen van deze
    methode eerst het volgende gecheckt wordt: if(container.hasAsIngredient(this))
    Als dit voldaan is, mag stored effectief op true gezet worden, anders niet!
end note

note right of AlchemicIngredient::AlchemicIngredient(Quantity)
    Bepaalde hoeveelheid standaardingredient, dit is
    IngredientType.DEFAULT (=water)
end note

AlchemicIngredient::type ..> IngredientType
AlchemicIngredient::state ..> State
AlchemicIngredient::temperature ..> Temperature
AlchemicIngredient::unit ..> Unit
AlchemicIngredient "0..*" <-- StorageLocation::ingredients

note right of AlchemicIngredient::getTemperatureObject
    De klasse invariant moet het Temperature object
    kunnen opvragen, in plaats van gewoon een array,
    zoals de publieke getTemperature() teruggeeft.
end note

class IngredientType {
..attributes..
- simpleName : String
- specialName : String
- allowedNameSymbols : char[0..*]
- {final} isMixed : boolean
- {final} standardState : State
- {final} standardTemp : Temperature
- {static} DEFAULT : IngredientType
..constructors..
+ IngredientType(String, Temperature)
..public methods..
+ getStandardTemp() : Temperature
..checkers..
+ canHaveAsName(String) : boolean
+ isValidState() : boolean
+ isValidTemperature() : boolean
..class invariants..
@invar canHaveAsName(getSimpleName())
@invar canHaveAsName(getSpecialName())
@invar isValidState(getStandardState())
@invar isValidTemperature(getStandardTemperature())
}

note right of IngredientType::DEFAULT_INGREDIENT
    Het default ingredientType is water
    en hier kunnen we dus al direct een
    instantie van aanmaken!
end note

IngredientType::state ..> "1" State
IngredientType::temperature ..> "1" Temperature

enum State {
..enum possibilities..
LIQUID,POWDER
}

enum Unit {
..enum possibilities..
DROP, SPOON, VIAL, BOTTLE,
JUG, BARREL, STOREROOM, PINCH,
SACHET, BOX, SACK, CHEST,STOREROOM
..attributes..
spoonEquivalent : double
allowedStates : State[1..*]
}

Unit::allowedStates ..> State

class Temperature {
..attributes..
- hotness : int
- coldness : int
- {static} UPPER_BOUND : long
..public methods..
+ heat(long) : void
+ cool(long) : void
+ getColdness() : int
+ getHotness() : int
+ getTemperature() : int[2]
..checkers..
+ isValidHotness(int) : boolean
+ isValidColdness(int) : boolean
+ isValidTemperature(int[2]) : boolean
..class invariants..
'@invar isValidHotness(getHotness())
'@invar isValidColdness(getColdness())
@invar isValidTemperature(getHotness(),getColdness())
}

abstract class StorageLocation {
..attributes..
- ingredients : ArrayList<AlchemicIngredient>
..checkers..
+ canHaveAsIngredient(AlchemicIngredient) : boolean
+ hasProperIngredients() : boolean
..methods..
+ addContainer(IngredientContainer) : void
- storeIngredientsFromContainer(IngredientContainer) : void
+ getNbOfIngredients() : int
+ getIngredientAt(int) : AlchemicIngredient
+ getIndexOf(AlchemicIngredient) : int
..class invariants..
@invar hasProperIngredients()
}

class IngredientContainer {
..attributes..
- ingredients : ArrayList<AlchemicIngredient>
- {final} capacity : Unit
- isDestroyed : boolean
- state : State
- ingredientType : IngredientType
..methods..
+ addIngredient(AlchemicIngredient) : void
+ hasAsIngredient(AlchemicIngredient) : void
..destructor..
+ destroy()
..checkers..
- isValidCapacity(Unit) : boolean
- canHaveAsIngredient(AlchemicIngredient) : boolean
- hasProperIngredients() : boolean
..class invariants..
@invar hasProperIngredients()
@invar isValidCapacity(getCapacity())
@invar isValidState(getState())
@invar isValidIngredientType(getIngredientType())
}

IngredientContainer::capacity ..> Unit

note top of IngredientContainer
    Voor de kleinste en grootste units
    bestaan er geen containers. Een container kan
    bovendien maar 1 type ingredient bevatten.
end note

abstract class Device extends StorageLocation {
..attributes..
- result : AlchemicIngredient
- laboratory : Laboratory
..methods..
+ getResult() : IngredientContainer
+ {abstract} executeOperation() : void
- isValidLaboratory(Laboratory) : boolean
..class invariants..
@invar canHaveAsResult(getResult())
@invar isValidLaboratory(getLaboratory())
}
'
abstract class TemperatureDevice extends Device {
..attributes..
- temperature : Temperature
..methods..
+ setTemperature(Temperature) : void
..overrides..
+ hasProperIngredients() : boolean
+ canHaveAsIngredient() : boolean
}
'
class CoolingBox extends TemperatureDevice {
..methods..
+ executeOperation() : void
}
'
note "Kunnen maar 1 element bevatten." as N2
CoolingBox .. N2
Oven .. N2

class Oven extends TemperatureDevice {
..methods..
+ executeOperation() : void
}
'
class Kettle extends Device {
..methods..
+ executeOperation() : void
}
'
class Transmogrifier extends Device {
+ executeOperation() : void
}

'
class Laboratory extends StorageLocation {
..attributes..
- capacity : int
'- ingredients : ArrayList<AlchemicIngredient>
- devices : ArrayList<Device>
'+ storeIngredient(IngredientContainer) : void
..methods..
+ Laboratory(int capacity, ArrayList<Device>, ArrayList<IngredientContainer>)
+ Laboratory(int capacity, ArrayList<Device>)
+ Laboratory(int capacity, ArrayList<IngredientContainer>)
+ Laboratory(int capacity)
+ addDevice(Device device) : void
+ removeDevice(Device) : void
+ getIngredient(String, int, Unit) : IngredientContainer
+ takeAllIngredientsOfType(String name) : IngredientContainer
+ takeAllIngredientsOfType(IngredientType) : IngredientContainer
+ takeAllAlchemicIngredients(AlchemicIngredient) : IngredientContainer
+ execute(Recipe, int) : void
+ getDevices() : ArrayList<Device>
+ getCapacity() : int
+ getOverview() : String
..checkers..
+ isValidCapacity(int) : boolean
+ hasProperDevices() : boolean
+ canHaveAsDevice(Device) : boolean
+ hasProperIngredients() : boolean
'+ {abstract} execute(Recipe, int) : void
..class invariants..
@invar isValidCapacity(getCapacity())
@invar hasProperDevices()
}
'
'Laboratory --> "0..*" AlchemicIngredient
'Laboratory "1" <--> "0..4" Device
'
'class Recipe {
'- operations : Operation[1..*]
'- ingredients : AlchemicIngredient[1..*]
'}
'
'enum Operation {
'ADD,
'HEAT,
'COOL,
'MIX
'}
'
'class RecipeBook {
'- recipes : ArrayList<Recipe>
'+ addRecipe(Recipe) : void
'+ removeRecipe(Recipe) : void
'}
'
'Recipe --> "1..*" Operation : has
'Recipe --> "1..*" AlchemicIngredient : has
'RecipeBook --> "0..*" Recipe : has

@enduml