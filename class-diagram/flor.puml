@startuml

skinparam linetype ortho

package rpg {

package ingredients {

class AlchemicIngredient {
__invariants__
@invar: hasValidTemperature()
@invar: hasValidSimpleName()
@invar: hasValidSpecialName()
@invar: hasValidCompleteName()
__attributes__
+ completeName: String
+ {final} amount: int
+ {final} quantity: Quantity
+ currentTemperature: Temperature
+ ingredientType: IngredientType
__constructors__
AlchemicIngredient(String name, Temperature standardTemperature, State state, int amount, Quantity quantity)
AlchemicIngredient(String name, Temperature standardTemperature, int amount, Quantity quantity)
__methods__
+ getSimpleName(): String
+ getCompleteName(): String
+ getSpecialName(): String
}

class IngredientType {
'total programming
__invariants__
@invar: hasValidStandardTemperature()
@invar: hasValidSimpleName()
@invar: hasValidSpecialName()
__attributes__
+ state: State
+ {final} standardTemperature: Temperature
+ simpleName: String
+ specialName: String
+ isMixed: boolean
__constructors__
+ IngredientType(String name, Temperature standardTemperature, State state)
+ IngredientType(String name, Temperature standardTemperature)
__methods__
+ canHaveSimpleName(String name): boolean
}

class IngredientContainer {
__invariants__
@invar: capacityNotExceeded()
__attributes__
+ ingredient: AlchemicIngredient
+ quantity: Quantity
+ capacity: int
}

enum Quantity {
'nominal programming
..both states..
+ SPOON
+ STOREROOM
..liquid state..
+ DROP
+ VIAL
+ BOTTLE
+ JUG
+ BARREL
..powder state..
+ PINCH
+ SACHET
+ BOX
+ SACK
+ CHEST
__methods__
getSpoonEquivalent(): int
getConversionFor(Quantity targetQuantity): int
}

class Temperature {
__invariants__
@invar: isValidTemperature()
__attributes__
- {static} UPPERBOUND: long
- hotness: long
- coldness: long
__constructors__
+ Temperature(long hotness, long coldness)
__methods__
# heat(long amount)
# cool(long amount)
- getHotness()
- getColdness()
+ getTemperature(): long[2]
+ difference(Temperature other)
}

enum State {
+ LIQUID
+ POWDER
}

IngredientContainer <-- AlchemicIngredient
AlchemicIngredient -- "1" Quantity
Quantity -- IngredientContainer
State - IngredientType : use
Temperature -- AlchemicIngredient: use

'unidirectioneel
AlchemicIngredient "*" <-- "1" IngredientType

}

package lab {

abstract Device {
__invariants__
@invar: hasLaboratory()
__attributes__
+ labo: Laboratory
__constructors__
Device(Laboratory labo)
__methods__
+ input(IngredientContainer container): void
+ return(IngredientContainer container): IngredientContainer
+ execute(): IngredientContainer
}

abstract TemperatureDevice extends Device {
__attributes__
+ ingredient: AlchemicIngredient
}

class CoolingBox extends TemperatureDevice {
__attributes__
+ temperature: int
}

class Oven extends TemperatureDevice {
__attributes__
+ temperature: int
}

class Kettle extends Device {
__attributes__
+ ingredients: ArrayList<IngredientContainer>
}

class Transmogrifier extends Device {
__attributes__
+ ingredient: AlchemicIngredient
}

class Laboratory {
'defensive programming
__invariants__
@invar hasProperDevices()
__attributes__
+ capacity: int
+ ingredients: ArrayList<AlchemicIngredient>
+ devices: ArrayList<Device>
__methods__
+ input(IngredientContainer container): void
+ return(String name, amount int, Quantity quantity): IngredientContainer
+ returnAll(String name): IngredientContainer
+ addDevice()
+ removeDevice()
+ execute(Recipe, int)
+ summary(): String
}

Laboratory "0..1" -- "0..4" Device

}

IngredientContainer -- Laboratory

package recipe {

enum Operations {
+ ADD
+ HEAT
+ COOL
+ MIX
}

class Recipe {
__attributes__
+ instructions: ArrayList<Operations>
+ ingredients: ArrayList<AlchemicIngredient>
}

class RecipeBook {
__attributes__
+ recipes: ArrayList<Recipe>
__constructors__
+ Recipebook()
__methods__
+ addAsRecipe(Recipe recipe): void
+ removeAsRecipe(Recipe recipe): void
}

RecipeBook <-- "0..*" Recipe
Recipe - Operations
Recipe <-- AlchemicIngredient

}
}

@enduml